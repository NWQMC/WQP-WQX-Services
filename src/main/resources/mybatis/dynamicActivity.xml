<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dynamicWhere">

    <sql id="baseWhereActivityClauses">
        <include refid="dynamicWhere.baseWhereStationClauses" />
        <if test="project != null">
            and (<include refid="dynamicWhere.activityProjects" />)
        </if>
        <if test="sampleMedia != null">
            and (<include refid="dynamicWhere.sampleMedia" />)
        </if>
        <if test="startDateLo != null or startDateHi != null">
            and (<include refid="dynamicWhere.startDateLoHi" />)
        </if>
    </sql>

    <sql id="activityLimitWhere">
        <if test="minactivities != null">
            and (filter.site_activity_count >= #{minactivities}::int)
        </if>
        <if test="minresults != null">
            and (filter.site_result_count >= #{minresults}::int)
        </if>
    </sql>

    <sql id="dynamicWhere.activityJoinActivitySum">
        join (
              select prime.data_source_id,
                     prime.station_id,
                     prime.activity_id,
                     count(*) over (partition by prime.data_source_id, prime.station_id) site_activity_count,
                     sum(prime.result_count) over (partition by prime.data_source_id, prime.station_id) site_result_count
                from activity_sum prime
                <where>
                    <include refid="dynamicWhere.baseWhereActivityClauses" />
                </where>
             ) filter
          on prime.data_source_id = filter.data_source_id and
             prime.station_id = filter.station_id and
             prime.activity_id = filter.activity_id
    </sql>

    <sql id="dynamicWhere.activityJoinResultSum">
        join (
              select data_source_id,
                     station_id,
                     activity_id,
                     count(activity_id) over (partition by data_source_id, station_id) site_activity_count,
                     sum(result_count) over (partition by data_source_id, station_id) site_result_count
                from (
                      select prime.data_source_id,
                             prime.station_id,
                             prime.activity_id,
                             sum(prime.result_count) result_count
                        from result_sum prime
                        <where>
                            <include refid="dynamicWhere.baseWhereResultClauses" />
                        </where>
                          group by prime.data_source_id,
                                   prime.station_id,
                                   prime.activity_id
                     ) first
             ) filter
          on prime.data_source_id = filter.data_source_id and
             prime.station_id = filter.station_id and
             prime.activity_id = filter.activity_id
    </sql>

    <sql id="activityBase">
        from activity prime
        <choose>
            <when test="analyticalmethod == null and assemblage == null and characteristicName == null and
                        characteristicType == null and pCode == null and subjectTaxonomicName == null">
                <include refid="dynamicWhere.activityJoinActivitySum"/>
            </when>
            <otherwise>
                <include refid="dynamicWhere.activityJoinResultSum"/>
            </otherwise>
        </choose>
        <where>
            <include refid="dynamicWhere.activityLimitWhere"/>
        </where>
    </sql>

</mapper>
