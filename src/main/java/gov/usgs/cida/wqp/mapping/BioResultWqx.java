package gov.usgs.cida.wqp.mapping;

import static gov.usgs.cida.wqp.mapping.BaseColumn.KEY_ORGANIZATION;
import static gov.usgs.cida.wqp.mapping.BaseColumn.KEY_ORGANIZATION_NAME;
import static gov.usgs.cida.wqp.mapping.ResultColumn.*;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

@Component
public class BioResultWqx extends BaseWqx implements IXmlMapping {

	public static final Map<String, String> HARD_BREAK = new LinkedHashMap<>();

	public static final Map<String, List<String>> COLUMN_POSITION = new LinkedHashMap<>();
	
	public static final Map<String, List<String>> GROUPING = new LinkedHashMap<>();

	
	static {
		HARD_BREAK.put(KEY_ORGANIZATION, ROOT_NODE);
		HARD_BREAK.put(KEY_ACTIVITY, WQX_ORGANIZATION);
		HARD_BREAK.put(KEY_RESULT_ID, WQX_ACTIVITY);
	}
	
	
	static {
		COLUMN_POSITION.put(KEY_ORGANIZATION,
				new LinkedList<String>(Arrays.asList(
						WQX_ORGANIZATION,
						WQX_ORGANIZATION_DESCRIPTION,
						WQX_ORGANIZATION_IDENTIFIER)));
		COLUMN_POSITION.put(KEY_ORGANIZATION_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ORGANIZATION,
						WQX_ORGANIZATION_DESCRIPTION,
						WQX_ORGANIZATION_FORMAL_NAME)));
		
		COLUMN_POSITION.put(KEY_ACTIVITY,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_ID)));
		COLUMN_POSITION.put(KEY_ACTIVITY_TYPE_CODE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_TYPE)));
		COLUMN_POSITION.put(KEY_SAMPLE_MEDIA,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_MEDIA)));
		COLUMN_POSITION.put(KEY_ACTIVITY_MEDIA_SUBDIV_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_MEDIA_SUB)));
		COLUMN_POSITION.put(KEY_EVENT_DATE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_START_DATE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_START_TIME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_START_TIME,
						WQX_TIME)));
		COLUMN_POSITION.put(KEY_ACT_START_TIME_ZONE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_START_TIME,
						WQX_TIME_ZONE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_STOP_DATE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_END_DATE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_STOP_TIME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_END_TIME,
						WQX_TIME)));
		COLUMN_POSITION.put(KEY_ACT_STOP_TIME_ZONE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_END_TIME,
						WQX_TIME_ZONE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_RELATIVE_DEPTH,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_RELATIVE_DEPTH)));

		
		COLUMN_POSITION.put(KEY_ACTIVITY_DEPTH,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_DEPTH,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_DEPTH_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_DEPTH,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_ACTIVITY_DEPTH_REF_POINT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_DEPTH_REFERENCE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_UPPER_DEPTH,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_TOP_DEPTH,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_UPPER_DEPTH_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_TOP_DEPTH,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_ACTIVITY_LOWER_DEPTH,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_BOTTOM_DEPTH,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_LOWER_DEPTH_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_BOTTOM_DEPTH,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_PROJECT_ID,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_PROJECT)));
		COLUMN_POSITION.put(KEY_ACTIVITY_CONDUCTING_ORG,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_CONDUCTION_ORG)));
		COLUMN_POSITION.put(KEY_SITE_ID,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_MONITORING_LOCATION_IDENTIFIER)));
		COLUMN_POSITION.put(KEY_ACTIVITY_COMMENT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_ACT_COMMENT)));
		COLUMN_POSITION.put(KEY_SAMPLE_AQFR_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_SAMPLE_AQUIFER)));
		COLUMN_POSITION.put(KEY_HYDROLOGIC_CONDITION_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_HYDROLOGIC_CONDITION)));
		COLUMN_POSITION.put(KEY_HYDROLOGIC_EVENT_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_DESCRIPTION,
						WQX_HYDROLOGIC_EVENT)));

		COLUMN_POSITION.put(KEY_ACTIVITY_LATITUDE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_LOCATION,
						WQX_LATITUDE_MEASURE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_LONGITUDE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_LOCATION,
						WQX_LONGITUDE_MEASURE)));
		COLUMN_POSITION.put(KEY_ACTIVITY_SOURCE_MAP_SCALE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_LOCATION,
						WQX_SOURCE_MAP_SCALE)));
		COLUMN_POSITION.put(KEY_ACT_HORIZONTAL_ACCURACY,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_LOCATION,
						WQX_HORIZONTAL_ACCY,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACT_HORIZONTAL_ACCURACY_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_LOCATION,
						WQX_HORIZONTAL_ACCY,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_ACT_HORIZONTAL_COLLECT_METHOD,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_LOCATION,
						WQX_HORIZONTAL_COLLECTION_METHOD)));
		COLUMN_POSITION.put(KEY_ACT_HORIZONTAL_DATUM_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_ACT_LOCATION,
						WQX_HORIZONTAL_DATUM)));

		COLUMN_POSITION.put(KEY_ASSEMBLAGE_SAMPLED_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_ASSEMBLAGE_SAMPLED)));
		COLUMN_POSITION.put(KEY_ACT_COLLECTION_DURATION,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_COLLECTION_DURATION,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACT_COLLECTION_DURATION_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_COLLECTION_DURATION,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_ACT_SAM_COMPNT_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_SAMPLING_COMPONENT)));
		COLUMN_POSITION.put(KEY_ACT_SAM_COMPNT_PLACE_IN_SERIES,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_SAMPLING_COMPONENT_PLACE)));
		COLUMN_POSITION.put(KEY_ACT_REACH_LENGTH,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_REACH_LENGTH,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACT_REACH_LENGTH_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_REACH_LENGTH,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_ACT_REACH_WIDTH,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_REACH_WIDTH,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACT_REACH_WIDTH_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_REACH_WIDTH,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_ACT_PASS_COUNT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_PASS_COUNT)));
		COLUMN_POSITION.put(KEY_NET_TYPE_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_NET_INFORMATION,
						WQX_NET_TYPE)));
		COLUMN_POSITION.put(KEY_ACT_NET_SURFACE_AREA,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_NET_INFORMATION,
						WQX_NET_SURFACE_AREA,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACT_NET_SURFACE_AREA_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_NET_INFORMATION,
						WQX_NET_SURFACE_AREA,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_ACT_NET_MESH_SIZE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_NET_INFORMATION,
						WQX_NET_MESH_SIZE,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACT_NET_MESH_SIZE_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_NET_INFORMATION,
						WQX_NET_MESH_SIZE,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_ACT_BOAT_SPEED,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_NET_INFORMATION,
						WQX_BOAT_SPEAD,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACT_BOAT_SPEED_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_NET_INFORMATION,
						WQX_BOAT_SPEAD,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_ACT_CURRENT_SPEED,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_NET_INFORMATION,
						WQX_CURRENT_SPEAD,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_ACT_CURRENT_SPEED_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_BIO_HABITAT_COLLECTION_INFO,
						WQX_NET_INFORMATION,
						WQX_CURRENT_SPEAD,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_TOXICITY_TEST_TYPE_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_BIO_ACT_DESCRIPTION,
						WQX_TOXICITY_TEST_TYPE)));
		

		COLUMN_POSITION.put(KEY_SAMPLE_COLLECT_METHOD_ID,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_COLLECTION_METHOD,
						WQX_METHOD_ID)));
		COLUMN_POSITION.put(KEY_SAMPLE_COLLECT_METHOD_CTX,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_COLLECTION_METHOD,
						WQX_METHOD_CONTEXT)));
		COLUMN_POSITION.put(KEY_SAMPLE_COLLECT_METHOD_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_COLLECTION_METHOD,
						WQX_METHOD_NAME)));
		COLUMN_POSITION.put(KEY_ACT_SAM_COLLECT_METH_QUAL_TYPE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_COLLECTION_METHOD,
						WQX_METHOD_QUALIFIER_TYPE)));
		COLUMN_POSITION.put(KEY_ACT_SAM_COLLECT_METH_DESC,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_COLLECTION_METHOD,
						WQX_METHOD_DESCRIPTION)));
		
		
		COLUMN_POSITION.put(KEY_SAMPLE_COLLECT_EQUIP_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_COLLECTION_EQUIPMENT)));

		COLUMN_POSITION.put(KEY_ACT_SAM_COLLECT_EQUIP_COMMENTS,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_COLLECTION_EQUIPMENT_COMMENT)));
		
		COLUMN_POSITION.put(KEY_ACT_SAM_PREP_METH_ID,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_SAMPLE_PREPARATION_METHOD,
						WQX_METHOD_ID)));
		COLUMN_POSITION.put(KEY_ACT_SAM_PREP_METH_CONTEXT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_SAMPLE_PREPARATION_METHOD,
						WQX_METHOD_CONTEXT)));
		COLUMN_POSITION.put(KEY_ACT_SAM_PREP_METH_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_SAMPLE_PREPARATION_METHOD,
						WQX_METHOD_NAME)));
		COLUMN_POSITION.put(KEY_ACT_SAM_PREP_METH_QUAL_TYPE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_SAMPLE_PREPARATION_METHOD,
						WQX_METHOD_QUALIFIER_TYPE)));
		COLUMN_POSITION.put(KEY_ACT_SAM_PREP_METH_DESC,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_SAMPLE_PREPARATION_METHOD,
						WQX_METHOD_DESCRIPTION)));
		COLUMN_POSITION.put(KEY_SAMPLE_CONTAINER_TYPE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_SAMPLE_CONTAINER_TYPE)));
		COLUMN_POSITION.put(KEY_SAMPLE_CONTAINER_COLOR,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_SAMPLE_CONTAINER_COLOR)));
		COLUMN_POSITION.put(KEY_ACT_SAM_CHEMICAL_PRESERVATIVE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_CHEMICAL_PRESERVATIVE)));
		COLUMN_POSITION.put(KEY_THERMAL_PRESERVATIVE_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_THERMAL_PRESERVATIVE)));
		COLUMN_POSITION.put(KEY_ACT_SAM_TRANSPORT_STORAGE_DESC,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_SAMPLE_DESCRIPTION,
						WQX_SAMPLE_PREPARATION,
						WQX_TRANSPORT_STORAGE)));
		
//		COLUMN_POSITION.put(KEY_METRIC_TYPE_IDENTIFIER,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE_ID)));
//		COLUMN_POSITION.put(KEY_METRIC_TYPE_CONTEXT,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE_ID_CONTEXT)));
//		COLUMN_POSITION.put(KEY_METRIC_TYPE_NAME,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE)));
//		COLUMN_POSITION.put(KEY_METRIC_CITATION_TITLE,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE_CITATION,
//						WQX_RESOURCE_TITLE)));
//		COLUMN_POSITION.put(KEY_METRIC_CITATION_CREATOR,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE_CITATION,
//						WQX_RESOURCE_CREATOR)));
//		COLUMN_POSITION.put(KEY_METRIC_CITATION_SUBJECT,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE_CITATION,
//						WQX_RESOURCE_SUBJECT)));
//		COLUMN_POSITION.put(KEY_METRIC_CITATION_PUBLISHER,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE_CITATION,
//						WQX_RESOURCE_PUBLISHER)));
//		COLUMN_POSITION.put(KEY_METRIC_CITATION_DATE,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE_CITATION,
//						WQX_RESOURCE_DATE)));
//		COLUMN_POSITION.put(KEY_METRIC_CITATION_ID,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE_CITATION,
//						WQX_RESOURCE_ID)));
//		COLUMN_POSITION.put(KEY_METRIC_TYPE_SCALE,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_METRIC_TYPE_SCALE)));
//		COLUMN_POSITION.put(KEY_FORMULA_DESCRIPTION,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_ACTIVITY_METRIC_TYPE,
//						WQX_FORMULA_DESCRIPTION)));
//		COLUMN_POSITION.put(KEY_ACTIVITY_METRIC_VALUE,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_METRIC_VALUE,
//						WQX_MEASURE_VALUE)));
//		COLUMN_POSITION.put(KEY_ACTIVITY_METRIC_UNIT,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_METRIC_VALUE,
//						WQX_MEASURE_UNIT)));
//		COLUMN_POSITION.put(KEY_ACTIVITY_METRIC_SCORE,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_METRIC_SCORE)));
//		COLUMN_POSITION.put(KEY_ACTIVITY_METRIC_COMMENT,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_METRIC_COMMENT)));
//		COLUMN_POSITION.put(KEY_INDEX_IDENTIFIER,
//				new LinkedList<String>(Arrays.asList(
//						WQX_ACTIVITY,
//						WQX_ACTIVITY_METRIC,
//						WQX_INDEX_ID)));

		COLUMN_POSITION.put(KEY_RESULT_DETECTION_CONDITION_TX,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_DETECTION_CONDITION)));

		COLUMN_POSITION.put(KEY_RES_DATA_LOGGER_LINE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_DATA_LOGGER_LINE)));
		COLUMN_POSITION.put(KEY_METHOD_SPECIFICATION_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_METHOD_SPECIFICATION)));

		COLUMN_POSITION.put(KEY_CHARACTERISTIC_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_CHAR_NAME)));
		COLUMN_POSITION.put(KEY_SAMPLE_FRACTION_TYPE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_SAMPLE_FRACTION)));
		COLUMN_POSITION.put(KEY_RESULT_MEASURE_VALUE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_RESULT_MEASURE,
						WQX_RESULT_MEASURE_VALUE
						)));
		COLUMN_POSITION.put(KEY_RESULT_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_RESULT_MEASURE,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_RESULT_MEAS_QUAL_CODE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_RESULT_MEASURE,
						WQX_MEASURE_QUALIFIER)));
		COLUMN_POSITION.put(KEY_RESULT_VALUE_STATUS,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_STATUS_ID)));
		COLUMN_POSITION.put(KEY_STATISTIC_TYPE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_STATISTICAL_BASE)));
		COLUMN_POSITION.put(KEY_RESULT_VALUE_TYPE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_VALUE_TYPE)));
		COLUMN_POSITION.put(KEY_WEIGHT_BASIS_TYPE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_WEIGHT_BASIS)));
		COLUMN_POSITION.put(KEY_DURATION_BASIS,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_TIME_BASIS)));
		COLUMN_POSITION.put(KEY_TEMPERATURE_BASIS_LEVEL,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_TEMP_BASIS)));
		COLUMN_POSITION.put(KEY_PARTICLE_SIZE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_PARTICLE_SIZE)));
		COLUMN_POSITION.put(KEY_PRECISION,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_DATA_QUALITY,
						WQX_PRECISION)));

		COLUMN_POSITION.put(KEY_RES_MEASURE_BIAS,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_DATA_QUALITY,
						WQX_BIAS)));
		COLUMN_POSITION.put(KEY_RES_MEASURE_CONF_INTERVAL,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_DATA_QUALITY,
						WQX_CONFIDENCE_INTERVAL)));
		COLUMN_POSITION.put(KEY_RES_MEASURE_UPPER_CONF_LIMIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_DATA_QUALITY,
						WQX_UPPER_CONFIDENCE_LIMIT)));
		COLUMN_POSITION.put(KEY_RES_MEASURE_LOWER_CONF_LIMIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_DATA_QUALITY,
						WQX_LOWER_CONFIDENCE_LIMIT)));

		COLUMN_POSITION.put(KEY_RESULT_COMMENT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_RESULT_COMMENT)));
		COLUMN_POSITION.put(KEY_P_CODE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_P_CODE)));
		COLUMN_POSITION.put(KEY_RESULT_DEPTH_MEAS_VALUE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_RESULT_DEPTH,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_RESULT_DEPTH_MEAS_UNIT_CODE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_RESULT_DEPTH,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_RESULT_DEPTH_ALT_REF_PT_TXT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_RESULT_DETH_REFERENCE)));

		COLUMN_POSITION.put(KEY_RES_SAMPLING_POINT_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_RESULT_DESRIPTION,
						WQX_RESULT_SAMPLING_POINT)));
		
		COLUMN_POSITION.put(KEY_BIOLOGICAL_INTENT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_BIOLOGICAL_INTENT)));
		COLUMN_POSITION.put(KEY_RES_BIO_INDIVIDUAL_ID,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_BIOLOGICAL_INDIVIDUAL_ID)));

		COLUMN_POSITION.put(KEY_SAMPLE_TISSUE_TAXONOMIC_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXON_NAME)));

		COLUMN_POSITION.put(KEY_UNIDENTIFIEDSPECIESIDENTIFIER,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_UNIDENTIFIED_SPECIES_IDENTIFIER)));

		COLUMN_POSITION.put(KEY_SAMPLE_TISSUE_ANATOMY_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TISSUE_ANATOMY)));

		COLUMN_POSITION.put(KEY_RES_GROUP_SUMMARY_CT_WT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_GROUP_SUMMARY_COUNT_WEIGHT,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_RES_GROUP_SUMMARY_CT_WT_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_GROUP_SUMMARY_COUNT_WEIGHT,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_CELL_FORM_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_CELL_FORM)));
		COLUMN_POSITION.put(KEY_CELL_SHAPE_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_CELL_SHAPE)));
		COLUMN_POSITION.put(KEY_HABIT_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_HABIT)));
		COLUMN_POSITION.put(KEY_VOLT_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_VOLTISM)));
		COLUMN_POSITION.put(KEY_RTDET_POLLUTION_TOLERANCE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_POLLUTION_TOLERANCE)));
		COLUMN_POSITION.put(KEY_RTDET_POLLUTION_TOLERNCE_SCALE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_TOLERANCE_SCALE)));
		COLUMN_POSITION.put(KEY_RTDET_TROPHIC_LEVEL,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_TROPHIC_LEVEL)));
		COLUMN_POSITION.put(KEY_RTFGRP_FUNCTIONAL_FEEDING_GRP,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_FUNCTIONAL_FEEDING_GROUP)));
		COLUMN_POSITION.put(KEY_TAXON_CITATION_TITLE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_TAXONIMC_DETAIL_CITATION,
						WQX_RESOURCE_TITLE)));
		COLUMN_POSITION.put(KEY_TAXON_CITATION_CREATOR,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_TAXONIMC_DETAIL_CITATION,
						WQX_RESOURCE_CREATOR)));
		COLUMN_POSITION.put(KEY_TAXON_CITATION_SUBJECT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_TAXONIMC_DETAIL_CITATION,
						WQX_RESOURCE_SUBJECT)));
		COLUMN_POSITION.put(KEY_TAXON_CITATION_PUBLISHER,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_TAXONIMC_DETAIL_CITATION,
						WQX_RESOURCE_PUBLISHER)));
		COLUMN_POSITION.put(KEY_TAXON_CITATION_DATE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_TAXONIMC_DETAIL_CITATION,
						WQX_RESOURCE_DATE)));
		COLUMN_POSITION.put(KEY_TAXON_CITATION_ID,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_TAXONOMIC_DETAILS,
						WQX_TAXONIMC_DETAIL_CITATION,
						WQX_RESOURCE_ID)));
		COLUMN_POSITION.put(KEY_FCDSC_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_FREQUENCY_CLASS_INFO,
						WQX_FREQUENCY_CLASS_DESCRIPTOR)));
		COLUMN_POSITION.put(KEY_FREQUENCY_CLASS_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_FREQUENCY_CLASS_INFO,
						WQX_FREQUENCE_CLASS_DESCRIPTOR_UNIT)));
		COLUMN_POSITION.put(KEY_FCDSC_LOWER_BOUND,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_FREQUENCY_CLASS_INFO,
						WQX_LOWER_CLASS_BOUND)));
		COLUMN_POSITION.put(KEY_FCDSC_UPPER_BOUND,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_BIOLOGICAL_RESULT,
						WQX_FREQUENCY_CLASS_INFO,
						WQX_UPPER_CLASS_BOUND)));



		COLUMN_POSITION.put(KEY_ANALYTICAL_PROCEDURE_ID,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_ANALYTICAL_METHOD,
						WQX_METHOD_ID)));
		COLUMN_POSITION.put(KEY_ANALYTICAL_PROCEDURE_SOURCE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_ANALYTICAL_METHOD,
						WQX_METHOD_CONTEXT)));
		COLUMN_POSITION.put(KEY_ANALYTICAL_METHOD_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_ANALYTICAL_METHOD,
						WQX_METHOD_NAME)));

		COLUMN_POSITION.put(KEY_ANLMTH_QUAL_TYPE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_ANALYTICAL_METHOD,
						WQX_METHOD_QUALIFIER_TYPE)));

		COLUMN_POSITION.put(KEY_ANALYTICAL_METHOD_CITATION,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_ANALYTICAL_METHOD,
						WQX_METHOD_DESCRIPTION)));

		COLUMN_POSITION.put(KEY_LAB_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_LAB_NAME)));
		COLUMN_POSITION.put(KEY_ANALYSIS_START_DATE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_ANALYSIS_START_DATE)));

		COLUMN_POSITION.put(KEY_ANALYSIS_START_TIME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_ANALYSIS_START_TIME,
						WQX_TIME)));
		COLUMN_POSITION.put(KEY_ANALYSIS_START_TIMEZONE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_ANALYSIS_START_TIME,
						WQX_TIME_ZONE)));
		COLUMN_POSITION.put(KEY_ANALYSIS_END_DATE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_ANALYSIS_END_DATE)));
		COLUMN_POSITION.put(KEY_ANALYSIS_END_TIME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_ANALYSIS_END_TIME,
						WQX_TIME)));
		COLUMN_POSITION.put(KEY_ANALYSIS_END_TIMEZONE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_ANALYSIS_END_TIME,
						WQX_TIME_ZONE)));
		COLUMN_POSITION.put(KEY_RLCOM_CD,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_LAB_COMMENT_CODE)));

		COLUMN_POSITION.put(KEY_LAB_REMARK,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_LAB_COMMENT)));
		COLUMN_POSITION.put(KEY_DETECTION_LIMIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_DETECTION_LIMIT,
						WQX_DETECTION_LIMIT_VALUE,
						WQX_MEASURE_VALUE)));
		COLUMN_POSITION.put(KEY_DETECTION_LIMIT_UNIT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_DETECTION_LIMIT,
						WQX_DETECTION_LIMIT_VALUE,
						WQX_MEASURE_UNIT)));
		COLUMN_POSITION.put(KEY_DETECTION_LIMIT_DESC,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_DETECTION_LIMIT,
						WQX_DETECTION_LIMIT_TYPE)));

		COLUMN_POSITION.put(KEY_RES_LAB_ACCRED_YN,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_LAB_ACCREDITATION_INDICATOR)));
		COLUMN_POSITION.put(KEY_RES_LAB_ACCRED_AUTHORITY,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_LAB_ACCREDITATION_AUTHORITY)));
		COLUMN_POSITION.put(KEY_RES_TAXONOMIST_ACCRED_YN,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_TAXONOMIST_ACCREDITATION_INDICATOR)));
		COLUMN_POSITION.put(KEY_RES_TAXONOMIST_ACCRED_AUTHORTY,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_INFO,
						WQX_TAXONOMIST_ACCREDITATION_AUTHORTY)));

		COLUMN_POSITION.put(KEY_PREP_METHOD_ID,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_LAB_SAMPLE_PREP_METHOD,
						WQX_METHOD_ID)));
		COLUMN_POSITION.put(KEY_PREP_METHOD_CONTEXT,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_LAB_SAMPLE_PREP_METHOD,
						WQX_METHOD_CONTEXT)));
		COLUMN_POSITION.put(KEY_PREP_METHOD_NAME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_LAB_SAMPLE_PREP_METHOD,
						WQX_METHOD_NAME)));
		COLUMN_POSITION.put(KEY_PREP_METHOD_QUAL_TYPE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_LAB_SAMPLE_PREP_METHOD,
						WQX_METHOD_QUALIFIER_TYPE)));
		COLUMN_POSITION.put(KEY_PREP_METHOD_DESC,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_LAB_SAMPLE_PREP_METHOD,
						WQX_METHOD_DESCRIPTION)));

		COLUMN_POSITION.put(KEY_ANALYSIS_PREP_DATE_TX,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_PREP_START_DATE)));

		COLUMN_POSITION.put(KEY_PREP_START_TIME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_PREP_START_TIME,
						WQX_TIME)));
		COLUMN_POSITION.put(KEY_PREP_START_TIMEZONE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_PREP_START_TIME,
						WQX_TIME_ZONE)));
		COLUMN_POSITION.put(KEY_PREP_END_DATE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_PREP_END_DATE)));
		COLUMN_POSITION.put(KEY_PREP_END_TIME,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_PREP_END_TIME,
						WQX_TIME)));
		COLUMN_POSITION.put(KEY_PREP_END_TIMEZONE,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_PREP_END_TIME,
						WQX_TIME_ZONE)));
		COLUMN_POSITION.put(KEY_PREP_DILUTION_FACTOR,
				new LinkedList<String>(Arrays.asList(
						WQX_ACTIVITY,
						WQX_RESULT,
						WQX_LAB_SAMPLE_PREP,
						WQX_SUBSTITUTION_DILUTION_FACTOR)));
		
	}

	static {
		GROUPING.put(KEY_ORGANIZATION,
				new LinkedList<String>(Arrays.asList(KEY_ORGANIZATION, KEY_ORGANIZATION_NAME)));
		GROUPING.put(KEY_ACTIVITY,
				new LinkedList<String>(Arrays.asList(
						KEY_ACTIVITY,
						KEY_ACTIVITY_TYPE_CODE,
						KEY_SAMPLE_MEDIA,
						KEY_ACTIVITY_MEDIA_SUBDIV_NAME,
						KEY_EVENT_DATE,
						KEY_ACTIVITY_START_TIME,
						KEY_ACT_START_TIME_ZONE,
						KEY_ACTIVITY_STOP_DATE,
						KEY_ACTIVITY_STOP_TIME,
						KEY_ACT_STOP_TIME_ZONE,
						KEY_ACTIVITY_RELATIVE_DEPTH,
						KEY_ACTIVITY_DEPTH,
						KEY_ACTIVITY_DEPTH_UNIT,
						KEY_ACTIVITY_DEPTH_REF_POINT,
						KEY_ACTIVITY_UPPER_DEPTH,
						KEY_ACTIVITY_UPPER_DEPTH_UNIT,
						KEY_ACTIVITY_LOWER_DEPTH,
						KEY_ACTIVITY_LOWER_DEPTH_UNIT,
						KEY_PROJECT_ID,
						KEY_ACTIVITY_CONDUCTING_ORG,
						KEY_SITE_ID,
						KEY_ACTIVITY_COMMENT,
						KEY_SAMPLE_AQFR_NAME,
						KEY_HYDROLOGIC_CONDITION_NAME,
						KEY_HYDROLOGIC_EVENT_NAME,
						KEY_ACTIVITY_LATITUDE,
						KEY_ACTIVITY_LONGITUDE,
						KEY_ACTIVITY_SOURCE_MAP_SCALE,
						KEY_ACT_HORIZONTAL_ACCURACY,
						KEY_ACT_HORIZONTAL_ACCURACY_UNIT,
						KEY_ACT_HORIZONTAL_COLLECT_METHOD,
						KEY_ACT_HORIZONTAL_DATUM_NAME,
						KEY_ASSEMBLAGE_SAMPLED_NAME,
						KEY_ACT_COLLECTION_DURATION,
						KEY_ACT_COLLECTION_DURATION_UNIT,
						KEY_ACT_SAM_COMPNT_NAME,
						KEY_ACT_SAM_COMPNT_PLACE_IN_SERIES,
						KEY_ACT_REACH_LENGTH,
						KEY_ACT_REACH_LENGTH_UNIT,
						KEY_ACT_REACH_WIDTH,
						KEY_ACT_REACH_WIDTH_UNIT,
						KEY_ACT_PASS_COUNT,
						KEY_NET_TYPE_NAME,
						KEY_ACT_NET_SURFACE_AREA,
						KEY_ACT_NET_SURFACE_AREA_UNIT,
						KEY_ACT_NET_MESH_SIZE,
						KEY_ACT_NET_MESH_SIZE_UNIT,
						KEY_ACT_BOAT_SPEED,
						KEY_ACT_BOAT_SPEED_UNIT,
						KEY_ACT_CURRENT_SPEED,
						KEY_ACT_CURRENT_SPEED_UNIT,
						KEY_TOXICITY_TEST_TYPE_NAME,
						KEY_SAMPLE_COLLECT_METHOD_ID,
						KEY_SAMPLE_COLLECT_METHOD_CTX,
						KEY_SAMPLE_COLLECT_METHOD_NAME,
						KEY_ACT_SAM_COLLECT_METH_QUAL_TYPE,
						KEY_ACT_SAM_COLLECT_METH_DESC,
						KEY_SAMPLE_COLLECT_EQUIP_NAME,
						KEY_ACT_SAM_COLLECT_EQUIP_COMMENTS,
						KEY_ACT_SAM_PREP_METH_ID,
						KEY_ACT_SAM_PREP_METH_CONTEXT,
						KEY_ACT_SAM_PREP_METH_NAME,
						KEY_ACT_SAM_PREP_METH_QUAL_TYPE,
						KEY_ACT_SAM_PREP_METH_DESC,
						KEY_SAMPLE_CONTAINER_TYPE,
						KEY_SAMPLE_CONTAINER_COLOR,
						KEY_ACT_SAM_CHEMICAL_PRESERVATIVE,
						KEY_THERMAL_PRESERVATIVE_NAME,
						KEY_ACT_SAM_TRANSPORT_STORAGE_DESC,
						KEY_METRIC_TYPE_IDENTIFIER,
						KEY_METRIC_TYPE_CONTEXT,
						KEY_METRIC_TYPE_NAME,
						KEY_METRIC_CITATION_TITLE,
						KEY_METRIC_CITATION_CREATOR,
						KEY_METRIC_CITATION_SUBJECT,
						KEY_METRIC_CITATION_PUBLISHER,
						KEY_METRIC_CITATION_DATE,
						KEY_METRIC_CITATION_ID,
						KEY_METRIC_TYPE_SCALE,
						KEY_FORMULA_DESCRIPTION,
						KEY_ACTIVITY_METRIC_VALUE,
						KEY_ACTIVITY_METRIC_UNIT,
						KEY_ACTIVITY_METRIC_SCORE,
						KEY_ACTIVITY_METRIC_COMMENT,
						KEY_INDEX_IDENTIFIER
						)));
		GROUPING.put(KEY_RESULT_ID,
				new LinkedList<String>(Arrays.asList(
						KEY_RES_DATA_LOGGER_LINE,
						KEY_CHARACTERISTIC_NAME,
						KEY_RESULT_DETECTION_CONDITION_TX,
						KEY_METHOD_SPECIFICATION_NAME,
						KEY_SAMPLE_FRACTION_TYPE,
						KEY_RESULT_MEASURE_VALUE,
						KEY_RESULT_UNIT,
						KEY_RESULT_MEAS_QUAL_CODE,
						KEY_RESULT_VALUE_STATUS,
						KEY_STATISTIC_TYPE,
						KEY_RESULT_VALUE_TYPE,
						KEY_WEIGHT_BASIS_TYPE,
						KEY_DURATION_BASIS,
						KEY_TEMPERATURE_BASIS_LEVEL,
						KEY_PARTICLE_SIZE,
						KEY_PRECISION,
						KEY_RES_MEASURE_BIAS,
						KEY_RES_MEASURE_CONF_INTERVAL,
						KEY_RES_MEASURE_UPPER_CONF_LIMIT,
						KEY_RES_MEASURE_LOWER_CONF_LIMIT,
						KEY_RESULT_COMMENT,
						KEY_P_CODE,
						KEY_RESULT_DEPTH_MEAS_VALUE,
						KEY_RESULT_DEPTH_MEAS_UNIT_CODE,
						KEY_RESULT_DEPTH_ALT_REF_PT_TXT,
						KEY_RES_SAMPLING_POINT_NAME,
						KEY_BIOLOGICAL_INTENT,
						KEY_RES_BIO_INDIVIDUAL_ID,
						KEY_SAMPLE_TISSUE_TAXONOMIC_NAME,
						KEY_UNIDENTIFIEDSPECIESIDENTIFIER,
						KEY_SAMPLE_TISSUE_ANATOMY_NAME,
						KEY_RES_GROUP_SUMMARY_CT_WT,
						KEY_RES_GROUP_SUMMARY_CT_WT_UNIT,
						KEY_CELL_FORM_NAME,
						KEY_CELL_SHAPE_NAME,
						KEY_HABIT_NAME,
						KEY_VOLT_NAME,
						KEY_RTDET_POLLUTION_TOLERANCE,
						KEY_RTDET_POLLUTION_TOLERNCE_SCALE,
						KEY_RTDET_TROPHIC_LEVEL,
						KEY_RTFGRP_FUNCTIONAL_FEEDING_GRP,
						KEY_TAXON_CITATION_TITLE,
						KEY_TAXON_CITATION_CREATOR,
						KEY_TAXON_CITATION_SUBJECT,
						KEY_TAXON_CITATION_PUBLISHER,
						KEY_TAXON_CITATION_DATE,
						KEY_TAXON_CITATION_ID,
						KEY_FCDSC_NAME,
						KEY_FREQUENCY_CLASS_UNIT,
						KEY_FCDSC_LOWER_BOUND,
						KEY_FCDSC_UPPER_BOUND,
						KEY_ANALYTICAL_PROCEDURE_ID,
						KEY_ANALYTICAL_PROCEDURE_SOURCE,
						KEY_ANALYTICAL_METHOD_NAME,
						KEY_ANLMTH_QUAL_TYPE,
						KEY_ANALYTICAL_METHOD_CITATION,
						KEY_LAB_NAME,
						KEY_ANALYSIS_START_DATE,
						KEY_ANALYSIS_START_TIME,
						KEY_ANALYSIS_START_TIMEZONE,
						KEY_ANALYSIS_END_DATE,
						KEY_ANALYSIS_END_TIME,
						KEY_ANALYSIS_END_TIMEZONE,
						KEY_RLCOM_CD,
						KEY_LAB_REMARK,
						KEY_DETECTION_LIMIT,
						KEY_DETECTION_LIMIT_UNIT,
						KEY_DETECTION_LIMIT_DESC,
						KEY_RES_LAB_ACCRED_YN,
						KEY_RES_LAB_ACCRED_AUTHORITY,
						KEY_RES_TAXONOMIST_ACCRED_YN,
						KEY_RES_TAXONOMIST_ACCRED_AUTHORTY,
						KEY_PREP_METHOD_ID,
						KEY_PREP_METHOD_CONTEXT,
						KEY_PREP_METHOD_NAME,
						KEY_PREP_METHOD_QUAL_TYPE,
						KEY_PREP_METHOD_DESC,
						KEY_ANALYSIS_PREP_DATE_TX,
						KEY_PREP_START_TIME,
						KEY_PREP_START_TIMEZONE,
						KEY_PREP_END_DATE,
						KEY_PREP_END_TIME,
						KEY_PREP_END_TIMEZONE,
						KEY_PREP_DILUTION_FACTOR
						)));
	}

	public String getEntryNodeName() {
		return WQX_ORGANIZATION;
	}

	public Map<String, List<String>> getStructure() {
		return COLUMN_POSITION;
	}

	public Map<String, String> getHardBreak() {
		return HARD_BREAK;
	}

	public Map<String, List<String>> getGrouping() {
		return GROUPING;
	}

}
